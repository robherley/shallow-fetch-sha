name: CI

on: [push, workflow_dispatch, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17
      - name: Set up known hosts for SSH tests
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ./script/generate_known_hosts
          mv ssh_known_hosts ~/.ssh/known_hosts
      - name: Run tests with Ginkgo
        run: |
          go install github.com/onsi/ginkgo/ginkgo@latest
          ginkgo -r
        env:
          ACK_GINKGO_RC: 'true'
          SSH_PASSPHRASE: ${{ secrets.SSH_PASSPHRASE }}
          SSH_PEM_NO_PASS: ${{ secrets.SSH_PEM_NO_PASS }}
          SSH_PEM_WITH_PASS: ${{ secrets.SSH_PEM_WITH_PASS }}
          BOT_PEM: ${{ secrets.BOT_PEM }}
          BOT_INSTALLATION_ID: ${{ secrets.BOT_INSTALLATION_ID }}
          BOT_ID: ${{ secrets.BOT_ID }}
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: ['linux', 'darwin', 'windows']
        arch: ['amd64', 'arm64']
    env:
      OUTPUT_BINARY: sfs_${{ matrix.os }}_${{ matrix.arch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17
      - name: Build ${{ matrix.os }}/${{ matrix.arch }}
        run: script/build -o $OUTPUT_BINARY
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
      - name: Set exec perms and add to gzip tarball
        run: |
          chmod +x ${{ env.OUTPUT_BINARY }}
          tar cvzf ${{ env.OUTPUT_BINARY }}.tar.gz ${{ env.OUTPUT_BINARY }}
      - name: Upload tarball
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.OUTPUT_BINARY }}
          path: ${{ env.OUTPUT_BINARY }}.tar.gz
          if-no-files-found: error
          retention-days: 1
  release:
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    if: github.ref_type == 'tag'
    outputs:
      release_id: ${{ steps.release.outputs.release_id }}
    steps:
      - name: Make release
        id: release
        uses: actions/github-script@v5
        with:
          script: |
            const tag_name = context.ref.replace("refs/tags/", "")
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name
            })

            core.setOutput('release_id', release.data.id);
  release-binaries:
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Download binaries
        uses: actions/download-artifact@v2
      - name: Upload release assets
        uses: actions/github-script@v5
        env:
          RELEASE_ID: ${{ needs.release.outputs.release_id }}
        with:
          script: |
            const fs = require('fs')
            const { readFile } = fs.promises

            const globber = await glob.create(`**/*.tar.gz`)
            const paths = await globber.glob()

            const files = paths.map(path => readFile(path))
            const rawfiles = await Promise.all(files)

            const release_id = +process.env['RELEASE_ID']
            if(!release_id) {
              throw new Error('Invalid release id')
            }

            const uploads = rawfiles.map((data, i) => github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: paths[i].split('/').reverse()[0],
              release_id,
              data
            }))

            await Promise.all(uploads)
  release-image:
    runs-on: ubuntu-latest
    needs: release
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Login to cr
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}